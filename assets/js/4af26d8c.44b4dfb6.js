"use strict";(self.webpackChunk_strapi_ts_docs=self.webpackChunk_strapi_ts_docs||[]).push([[575],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,h=m["".concat(l,".").concat(d)]||m[d]||u[d]||s;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<s;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7120:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return m}});var a=n(3117),r=n(102),s=(n(7294),n(3905)),i=["components"],o={title:"Test"},l=void 0,p={unversionedId:"test",id:"test",isDocsHomePage:!1,title:"Test",description:"Unit tests",source:"@site/docs/test.md",sourceDirName:".",slug:"/test",permalink:"/strapi-ts/test",tags:[],version:"current",frontMatter:{title:"Test"},sidebar:"docsSidebar",previous:{title:"Schema",permalink:"/strapi-ts/schema"},next:{title:"Notes",permalink:"/strapi-ts/notes"}},c=[{value:"Unit tests",id:"unit-tests",children:[],level:3},{value:"E2E tests",id:"e2e-tests",children:[],level:3},{value:"Strapi Environment",id:"strapi-environment",children:[],level:3},{value:"Test Api",id:"test-api",children:[],level:3},{value:"Custom Jest matcher",id:"custom-jest-matcher",children:[{value:"step to create custom Jest matcher",id:"step-to-create-custom-jest-matcher",children:[],level:4}],level:3},{value:"Define new global variables for test",id:"define-new-global-variables-for-test",children:[],level:3},{value:"Watch",id:"watch",children:[],level:3},{value:"Specify a test",id:"specify-a-test",children:[],level:3},{value:"No console output",id:"no-console-output",children:[],level:3},{value:"Test cronjobs",id:"test-cronjobs",children:[],level:3}],u={toc:c};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,s.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h3",{id:"unit-tests"},"Unit tests"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"In this project, a unit test is expected to be a test without a database/network connection")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"The unit test file should suffix with ",(0,s.kt)("inlineCode",{parentName:"p"},".test"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"The jest config file is ",(0,s.kt)("inlineCode",{parentName:"p"},"jest.config.js"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"run all unit test"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"yarn test\n")))),(0,s.kt)("h3",{id:"e2e-tests"},"E2E tests"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"In this project, the e2e test is expected to be a test with a database/network connection.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"The e2e test file should suffix with ",(0,s.kt)("inlineCode",{parentName:"p"},".e2e-spec"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"The jest config file is ",(0,s.kt)("inlineCode",{parentName:"p"},"jest.e2e.config.js"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"run all e2e test"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"yarn test:e2e\n")))),(0,s.kt)("h3",{id:"strapi-environment"},"Strapi Environment"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"StrapiEnvironment")," presets for each e2e test. A strapi instance and a database will start automatically. You do not need to handle the lifecycle of strapi in each test file like this ",(0,s.kt)("a",{parentName:"p",href:"https://strapi.io/documentation/developer-docs/latest/guides/unit-testing.html#strapi-instance"},"example"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"But be careful, the strapi instance and database are reuse in each test.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"You could use the ",(0,s.kt)("inlineCode",{parentName:"p"},"strapi")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"request")," instance directly in the e2e test file"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"strapi.query('products').find();\nstrapi.services.product.creates({});\n\n// instead of request(strapi.server).get('/products').send`\nrequest.get('/products').send();\n"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"For more details, see ",(0,s.kt)("inlineCode",{parentName:"p"},"strapi/tests/helpers/strapiEnvironment.ts")))),(0,s.kt)("h3",{id:"test-api"},"Test Api"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"I have created an API instance/utility for the e2e testing. You do not need to care about the HTTP method and the path.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"The API instance is strongly typed. It depends on ",(0,s.kt)("inlineCode",{parentName:"p"},"strapi/tests/helpers/routes.ts")," which is a file auto-generated by ",(0,s.kt)("inlineCode",{parentName:"p"},"esbuild/routeMetadata.ts"),". If you found the content is not up to date. Just run ",(0,s.kt)("inlineCode",{parentName:"p"},"yarn build"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Examples:"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"// basic usage\napi.category.find().send();\n// dynamic path '/categories/:id'\napi.category.findOne({ id: 'mongoid' }).send();\n// add bearer token\napi.profile.get().token(token).send();\n// multipart, file upload\napi.product\n  .create()\n  .multipart()\n  .attach('file', './image.png')\n  .field({ data: JSON.stringify({}) });\n")),(0,s.kt)("p",{parentName:"li"},"The above code same as below"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"request.get('/categories').send();\nrequest.get(`/categories/${mongoid}`).send();\nrequest.get(`/profile`).set('Authorization', `bearer ${token}`).send();\nrequest\n  .post(`/products`)\n  .set('Content-Type', 'multipart/form-data')\n  .attach('file', './image.png')\n  .field({ data: JSON.stringify({}) });\n")))),(0,s.kt)("h3",{id:"custom-jest-matcher"},"Custom Jest matcher"),(0,s.kt)("p",null,"I have defined some custom jest matcher in ",(0,s.kt)("inlineCode",{parentName:"p"},"strapi/tests/matchers")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { HTTPStatus } from '@/tests/helpers/httpStatus';\n\ntest('...', async () => {\n  const response = await request.get('/categories').send();\n  // expect response status to be 200\n  expect(response).toHaveStatus(HTTPStatus.OK);\n  // expect response.error not false\n  expect(response).toHaveError(HTTPStatus.OK);\n  // expect response.error is false\n  expect(response).not.toHaveError(HTTPStatus.OK);\n});\n")),(0,s.kt)("h4",{id:"step-to-create-custom-jest-matcher"},"step to create custom Jest matcher"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Refer to the matchers in ",(0,s.kt)("inlineCode",{parentName:"p"},"tests/matchers"))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Remember to extend and export the matcher function"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"export function theMatcherFunction(\n  this: jest.MatcherContext,\n  received: unknwon,\n  expected: unknwon\n): jest.CustomMatcherResult | Promise<jest.CustomMatcherResult> {}\n\nexpect.extend({ theMatcherFunction });\n")),(0,s.kt)("ol",{start:3},(0,s.kt)("li",{parentName:"ol"},"Export the matcher file in ",(0,s.kt)("inlineCode",{parentName:"li"},"tests/matchers/index.js"))),(0,s.kt)("h3",{id:"define-new-global-variables-for-test"},"Define new global variables for test"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Define the type of variables in ",(0,s.kt)("inlineCode",{parentName:"li"},"tests/jest-e2e.d.ts")),(0,s.kt)("li",{parentName:"ol"},"Set the initial values in ",(0,s.kt)("inlineCode",{parentName:"li"},"/jest-setup.js")),(0,s.kt)("li",{parentName:"ol"},"Update the ",(0,s.kt)("inlineCode",{parentName:"li"},"globals")," field in ",(0,s.kt)("inlineCode",{parentName:"li"},".eslintrc"))),(0,s.kt)("h3",{id:"watch"},"Watch"),(0,s.kt)("p",null,"start development using ",(0,s.kt)("inlineCode",{parentName:"p"},"yarn dev")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"docker-compose up"),". Open another terminal and type"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"yarn app test --watch\nyarn app test:e2e --watch\n")),(0,s.kt)("h3",{id:"specify-a-test"},"Specify a test"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"yarn test app/schema/joi/mongoid.test.js\nyarn test:e2e app/tests/category.e2e-spec.ts\n")),(0,s.kt)("h3",{id:"no-console-output"},"No console output"),(0,s.kt)("p",null,"Copy below test as the last test"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"test('delay', async () => {\n  const delay = (ms: number) => new Promise(_ => setTimeout(_, ms));\n  await expect(delay(2000).then(() => 1)).resolves.toBe(1);\n});\n")),(0,s.kt)("h3",{id:"test-cronjobs"},"Test cronjobs"),(0,s.kt)("p",null,"try to add below test at the end ..."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { cron } from '@/tests/helpers/cron';\n\ntest('...', async () => {\n  await cron('*/5 * * * *', {\n    advanceTimersByTime: 5 * 60 * 1000\n  });\n});\n")))}m.isMDXComponent=!0}}]);