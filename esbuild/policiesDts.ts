import glob from 'globby';
import { promises } from 'fs';
import { basename, relative, resolve } from 'path';
import { formatCode } from '../scripts/prettier';
import type { Plugin } from 'esbuild';

const getPolicies = async (srcDir: string) => {
  const files = await glob([`**/policies/*.ts`], { cwd: srcDir });
  const policies = files.reduce((policies, file) => {
    const name = basename(file).replace('.ts', '');
    const key = file.startsWith('config')
      ? `global::${name}`
      : file.startsWith('extensions')
      ? `plugins::${file.split('/')[1]}.${name}`
      : `${file.split('/')[1]}.${name}`;
    return [...policies, key, name];
  }, [] as string[]);

  return policies;
};

const idx = (value: string) => {
  switch (true) {
    case value.startsWith(`global::`):
      return 4;
    case value.startsWith(`plugins::`):
      return 3;
    case value.indexOf('.') !== -1:
      return 2;
    default:
      return 1;
  }
};

export const genPoliciesDts = (srcDir: string) => {
  const genPolicies = async () => {
    const defaultPolices = [
      'plugins::users-permissions.isAuthenticated',
      'plugins::users-permissions.ratelimit'
    ];
    const customPolicies = await getPolicies(srcDir);

    let policies = [...defaultPolices, ...customPolicies];
    policies = [...new Set(policies)];
    policies = policies.sort((a, b) => idx(b) - idx(a));

    const filePath = relative(srcDir, __filename);
    const content = `
      /**
       * This file is auto-generated by "${filePath}" 
       */
      
      declare type IPolicies = '${policies.join("' | '")}' 
    `;

    const dist = resolve(__dirname, '../', srcDir, 'types', 'policies.d.ts');

    await promises.writeFile(
      dist,
      formatCode(content, { parser: 'typescript' })
    );
  };

  const plugin: Plugin = {
    name: 'generate-policies',
    setup(build) {
      build.onStart(genPolicies);
    }
  };

  return plugin;
};
