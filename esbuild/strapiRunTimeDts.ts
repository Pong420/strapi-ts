import fs from 'fs/promises';
import path from 'path';
import glob from 'globby';
import { basename, relative, resolve } from 'path';
import { formatTs } from '../scripts/prettier';
import type { Plugin } from 'esbuild';

const defaultPolicies = [
  'plugins::users-permissions.isAuthenticated',
  'plugins::users-permissions.ratelimit'
];

const getPolicyIdx = (value: string) => {
  switch (true) {
    case value.startsWith(`global::`):
      return 4;
    case value.startsWith(`plugins::`):
      return 3;
    case value.indexOf('.') !== -1:
      return 2;
    default:
      return 1;
  }
};

export const genStrapiRunTimeDts = (srcDir: string) => {
  const getPolicies = async () => {
    const files = await glob([`**/policies/*.ts`], { cwd: srcDir });
    const policies = new Set(defaultPolicies);
    for (const file of files) {
      const name = basename(file).replace('.ts', '');
      if (file.startsWith('config')) {
        policies.add(`global::${name}`);
      } else if (file.startsWith('extensions')) {
        policies.add(`plugins::${file.split('/')[1]}.${name}`);
      } else {
        policies.add(`${file.split('/')[1]}.${name}`);
        policies.add(name);
      }
    }
    return [...policies].sort((a, b) => {
      const diff = getPolicyIdx(b) - getPolicyIdx(a);
      return diff === 0 ? b.localeCompare(a) : diff;
    });
  };

  const getApiNames = async () => {
    const entries = await glob(['**/*.settings.json'], {
      cwd: path.join(srcDir, 'api')
    });
    return entries
      .map(n => path.basename(n).replace('.settings.json', ''))
      .sort((a, b) => a.localeCompare(b));
  };

  const filePath = relative(srcDir, __filename);
  const dist = resolve(__dirname, '../', srcDir, 'types/strapi-runtime.d.ts');
  let content = ``;

  const plugin: Plugin = {
    name: 'generate-strapi-runtime-dts',
    setup(build) {
      build.onStart(async () => {
        const policies = await getPolicies();
        const apiNames = await getApiNames();

        content = `
            /**
             * This file is auto-generated by "${filePath}" 
             */

            declare type IApiNames = '${apiNames.join("' | '")}';

            declare type IPolicies = '${policies.join("' | '")}'; 
        `;
      });

      build.onEnd(async () => {
        const formatted = await formatTs(content);
        await fs.writeFile(dist, formatted);
      });
    }
  };

  return plugin;
};
