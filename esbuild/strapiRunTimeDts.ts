import fs from 'fs/promises';
import path from 'path';
import glob from 'globby';
import { basename, relative, resolve } from 'path';
import { formatCode } from '../scripts/prettier';
import type { Plugin } from 'esbuild';

const defaultPolices = [
  'plugins::users-permissions.isAuthenticated',
  'plugins::users-permissions.ratelimit'
];

const getPolicyIdx = (value: string) => {
  switch (true) {
    case value.startsWith(`global::`):
      return 4;
    case value.startsWith(`plugins::`):
      return 3;
    case value.indexOf('.') !== -1:
      return 2;
    default:
      return 1;
  }
};

export const genStrapiRunTimeDts = (srcDir: string) => {
  const getPolicies = async () => {
    const files = await glob([`**/policies/*.ts`], { cwd: srcDir });
    const policies = new Set(defaultPolices);
    for (const file of files) {
      const name = basename(file).replace('.ts', '');
      const key = file.startsWith('config')
        ? `global::${name}`
        : file.startsWith('extensions')
        ? `plugins::${file.split('/')[1]}.${name}`
        : `${file.split('/')[1]}.${name}`;

      policies.add(key);
      policies.add(name);
    }
    return [...policies].sort((a, b) => getPolicyIdx(b) - getPolicyIdx(a));
  };

  const getApiNames = async () => {
    const entries = await fs.readdir(path.join(srcDir, 'api'));
    return entries.filter(e => e.indexOf('.') === -1);
  };

  const filePath = relative(srcDir, __filename);
  const dist = resolve(__dirname, '../', srcDir, 'types/strapi-runtime.d.ts');
  let content = `
    /**
     * This file is auto-generated by "${filePath}" 
     */
  `;

  const plugin: Plugin = {
    name: 'generate-strapi-runtime-dts',
    setup(build) {
      build.onStart(async () => {
        const policies = await getPolicies();
        const apiNames = await getApiNames();

        content += `
          declare type IApiNames = '${apiNames.join("' | '")}';

          declare type IPolicies = '${policies.join("' | '")}'; 
        `;
      });

      build.onEnd(async () => {
        const formatted = await formatCode(content, { parser: 'typescript' });
        await fs.writeFile(dist, formatted);
      });
    }
  };

  return plugin;
};
