import fs from 'fs/promises';
import path from 'path';
import glob from 'globby';
import { watch, FSWatcher } from 'chokidar';
import { formatTs } from '../prettier';
import { root, srcDir } from '../constants';

interface Options {
  enableWatch: boolean;
}

const defaultPolicies = [
  'plugins::users-permissions.isAuthenticated',
  'plugins::users-permissions.ratelimit'
];

const getPolicyIdx = (value: string) => {
  switch (true) {
    case value.startsWith(`global::`):
      return 4;
    case value.startsWith(`plugins::`):
      return 3;
    case value.indexOf('.') !== -1:
      return 2;
    default:
      return 1;
  }
};

const policesPattern = `**/policies/*.ts`;
const apiPattern = '**/*.settings.json';

let watcher: FSWatcher;

export async function genStrapiRunTimeDts(options: Options) {
  const { enableWatch } = options;

  const getPolicies = async () => {
    const files = await glob(policesPattern, { cwd: srcDir });
    const policies = new Set(defaultPolicies);
    for (const file of files) {
      const name = path.basename(file).replace('.ts', '');
      if (file.startsWith('config')) {
        policies.add(`global::${name}`);
      } else if (file.startsWith('extensions')) {
        policies.add(`plugins::${file.split('/')[1]}.${name}`);
      } else {
        policies.add(`${file.split('/')[1]}.${name}`);
        policies.add(name);
      }
    }
    return [...policies].sort((a, b) => {
      const diff = getPolicyIdx(b) - getPolicyIdx(a);
      return diff === 0 ? b.localeCompare(a) : diff;
    });
  };

  const getApiNames = async () => {
    const entries = await glob(apiPattern, {
      cwd: path.join(srcDir, 'api')
    });
    return entries
      .map(n => path.basename(n).replace('.settings.json', ''))
      .sort((a, b) => a.localeCompare(b));
  };

  let content = ``;

  const policies = await getPolicies();
  const apiNames = await getApiNames();

  content = `
      /**
       * This file is auto-generated by "${__filename.slice(root.length)}" 
       */

      declare type IApiNames = '${apiNames.join("' | '")}';

      declare type IPolicies = '${policies.join("' | '")}'; 
  `;

  const formatted = await formatTs(content);
  await fs.writeFile(path.join(srcDir, 'types/strapi-runtime.d.ts'), formatted);

  if (enableWatch) {
    if (!watcher) {
      watcher = watch([policesPattern, apiPattern], {
        ignored: ['**/node_modules'],
        ignoreInitial: true,
        cwd: srcDir
      });
    }
    watcher.removeAllListeners();
    watcher.on('all', () => genStrapiRunTimeDts(options));
  }
}
